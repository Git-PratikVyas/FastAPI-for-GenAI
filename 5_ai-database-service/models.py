from pydantic import BaseModel, Field
from typing import Optional
from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.orm import declarative_base
from datetime import datetime

# SQLAlchemy Base
Base = declarative_base()

# SQLAlchemy Model for Database
class GenerationRecord(Base):
    __tablename__ = "generation_records"
    id = Column(Integer, primary_key=True, index=True)
    prompt = Column(String, nullable=False)
    generated_text = Column(String, nullable=False)
    model = Column(String, nullable=False)  # Renamed from model_name
    created_at = Column(DateTime, default=datetime.utcnow)

# Pydantic Models for API
class TextGenerationRequest(BaseModel):
    prompt: str = Field(..., min_length=1, max_length=500, description="Input prompt for text generation")
    max_length: Optional[int] = Field(50, ge=10, le=200, description="Maximum length of generated text")

class TextGenerationResponse(BaseModel):
    id: int = Field(..., description="Database record ID")
    generated_text: str = Field(..., description="Text generated by the AI model")
    model: str = Field(..., description="Name of the AI model used")  # Renamed from model_name
    created_at: str = Field(..., description="Timestamp of record creation")