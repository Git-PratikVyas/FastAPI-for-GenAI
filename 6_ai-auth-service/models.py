from pydantic import BaseModel, Field
from typing import Optional
from sqlalchemy import Column, Integer, String, Enum
from sqlalchemy.ext.declarative import declarative_base
import enum

# SQLAlchemy Base
Base = declarative_base()


# User Roles
class Role(enum.Enum):
    user = "user"
    admin = "admin"


# SQLAlchemy Model for Users
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    role = Column(Enum(Role), default=Role.user, nullable=False)


# Pydantic Models for API
class UserCreate(BaseModel):
    username: str = Field(
        ..., min_length=3, max_length=50, description="User's username"
    )
    password: str = Field(..., min_length=6, description="User's password")
    role: Role = Field(Role.user, description="User's role")


class UserResponse(BaseModel):
    id: int
    username: str
    role: Role


class Token(BaseModel):
    access_token: str
    token_type: str


class TextGenerationRequest(BaseModel):
    prompt: str = Field(
        ...,
        min_length=1,
        max_length=500,
        description="Input prompt for text generation",
    )
    max_length: Optional[int] = Field(
        50, ge=10, le=200, description="Maximum length of generated text"
    )


class TextGenerationResponse(BaseModel):
    generated_text: str = Field(..., description="Text generated by the AI model")
    # --- MODIFIED LINE TO AVOID Pydantic WARNING ---
    model: str = Field(..., description="Name of the AI model used")
